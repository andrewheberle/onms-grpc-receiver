//
// Licensed to The OpenNMS Group, Inc (TOG) under one or more
// contributor license agreements.  See the LICENSE.md file
// distributed with this work for additional information
// regarding copyright ownership.
//
// TOG licenses this file to You under the GNU Affero General
// Public License Version 3 (the "License") or (at your option)
// any later version.  You may not use this file except in
// compliance with the License.  You may obtain a copy of the
// License at:
//
//      https://www.gnu.org/licenses/agpl-3.0.txt
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied.  See the License for the specific
// language governing permissions and limitations under the
// License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: spog.proto

package spog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NmsInventoryServiceSync_InventoryUpdate_FullMethodName = "/org.opennms.plugin.grpc.proto.spog.NmsInventoryServiceSync/InventoryUpdate"
	NmsInventoryServiceSync_AlarmUpdate_FullMethodName     = "/org.opennms.plugin.grpc.proto.spog.NmsInventoryServiceSync/AlarmUpdate"
	NmsInventoryServiceSync_EventUpdate_FullMethodName     = "/org.opennms.plugin.grpc.proto.spog.NmsInventoryServiceSync/EventUpdate"
	NmsInventoryServiceSync_HeartBeatUpdate_FullMethodName = "/org.opennms.plugin.grpc.proto.spog.NmsInventoryServiceSync/HeartBeatUpdate"
)

// NmsInventoryServiceSyncClient is the client API for NmsInventoryServiceSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NmsInventoryServiceSyncClient interface {
	InventoryUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NmsInventoryUpdateList, emptypb.Empty], error)
	AlarmUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AlarmUpdateList, emptypb.Empty], error)
	EventUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventUpdateList, emptypb.Empty], error)
	HeartBeatUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HeartBeat, emptypb.Empty], error)
}

type nmsInventoryServiceSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewNmsInventoryServiceSyncClient(cc grpc.ClientConnInterface) NmsInventoryServiceSyncClient {
	return &nmsInventoryServiceSyncClient{cc}
}

func (c *nmsInventoryServiceSyncClient) InventoryUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NmsInventoryUpdateList, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NmsInventoryServiceSync_ServiceDesc.Streams[0], NmsInventoryServiceSync_InventoryUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NmsInventoryUpdateList, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NmsInventoryServiceSync_InventoryUpdateClient = grpc.BidiStreamingClient[NmsInventoryUpdateList, emptypb.Empty]

func (c *nmsInventoryServiceSyncClient) AlarmUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AlarmUpdateList, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NmsInventoryServiceSync_ServiceDesc.Streams[1], NmsInventoryServiceSync_AlarmUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AlarmUpdateList, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NmsInventoryServiceSync_AlarmUpdateClient = grpc.BidiStreamingClient[AlarmUpdateList, emptypb.Empty]

func (c *nmsInventoryServiceSyncClient) EventUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventUpdateList, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NmsInventoryServiceSync_ServiceDesc.Streams[2], NmsInventoryServiceSync_EventUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventUpdateList, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NmsInventoryServiceSync_EventUpdateClient = grpc.BidiStreamingClient[EventUpdateList, emptypb.Empty]

func (c *nmsInventoryServiceSyncClient) HeartBeatUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HeartBeat, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NmsInventoryServiceSync_ServiceDesc.Streams[3], NmsInventoryServiceSync_HeartBeatUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HeartBeat, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NmsInventoryServiceSync_HeartBeatUpdateClient = grpc.BidiStreamingClient[HeartBeat, emptypb.Empty]

// NmsInventoryServiceSyncServer is the server API for NmsInventoryServiceSync service.
// All implementations must embed UnimplementedNmsInventoryServiceSyncServer
// for forward compatibility.
type NmsInventoryServiceSyncServer interface {
	InventoryUpdate(grpc.BidiStreamingServer[NmsInventoryUpdateList, emptypb.Empty]) error
	AlarmUpdate(grpc.BidiStreamingServer[AlarmUpdateList, emptypb.Empty]) error
	EventUpdate(grpc.BidiStreamingServer[EventUpdateList, emptypb.Empty]) error
	HeartBeatUpdate(grpc.BidiStreamingServer[HeartBeat, emptypb.Empty]) error
	mustEmbedUnimplementedNmsInventoryServiceSyncServer()
}

// UnimplementedNmsInventoryServiceSyncServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNmsInventoryServiceSyncServer struct{}

func (UnimplementedNmsInventoryServiceSyncServer) InventoryUpdate(grpc.BidiStreamingServer[NmsInventoryUpdateList, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method InventoryUpdate not implemented")
}
func (UnimplementedNmsInventoryServiceSyncServer) AlarmUpdate(grpc.BidiStreamingServer[AlarmUpdateList, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method AlarmUpdate not implemented")
}
func (UnimplementedNmsInventoryServiceSyncServer) EventUpdate(grpc.BidiStreamingServer[EventUpdateList, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method EventUpdate not implemented")
}
func (UnimplementedNmsInventoryServiceSyncServer) HeartBeatUpdate(grpc.BidiStreamingServer[HeartBeat, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method HeartBeatUpdate not implemented")
}
func (UnimplementedNmsInventoryServiceSyncServer) mustEmbedUnimplementedNmsInventoryServiceSyncServer() {
}
func (UnimplementedNmsInventoryServiceSyncServer) testEmbeddedByValue() {}

// UnsafeNmsInventoryServiceSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NmsInventoryServiceSyncServer will
// result in compilation errors.
type UnsafeNmsInventoryServiceSyncServer interface {
	mustEmbedUnimplementedNmsInventoryServiceSyncServer()
}

func RegisterNmsInventoryServiceSyncServer(s grpc.ServiceRegistrar, srv NmsInventoryServiceSyncServer) {
	// If the following call pancis, it indicates UnimplementedNmsInventoryServiceSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NmsInventoryServiceSync_ServiceDesc, srv)
}

func _NmsInventoryServiceSync_InventoryUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NmsInventoryServiceSyncServer).InventoryUpdate(&grpc.GenericServerStream[NmsInventoryUpdateList, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NmsInventoryServiceSync_InventoryUpdateServer = grpc.BidiStreamingServer[NmsInventoryUpdateList, emptypb.Empty]

func _NmsInventoryServiceSync_AlarmUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NmsInventoryServiceSyncServer).AlarmUpdate(&grpc.GenericServerStream[AlarmUpdateList, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NmsInventoryServiceSync_AlarmUpdateServer = grpc.BidiStreamingServer[AlarmUpdateList, emptypb.Empty]

func _NmsInventoryServiceSync_EventUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NmsInventoryServiceSyncServer).EventUpdate(&grpc.GenericServerStream[EventUpdateList, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NmsInventoryServiceSync_EventUpdateServer = grpc.BidiStreamingServer[EventUpdateList, emptypb.Empty]

func _NmsInventoryServiceSync_HeartBeatUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NmsInventoryServiceSyncServer).HeartBeatUpdate(&grpc.GenericServerStream[HeartBeat, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NmsInventoryServiceSync_HeartBeatUpdateServer = grpc.BidiStreamingServer[HeartBeat, emptypb.Empty]

// NmsInventoryServiceSync_ServiceDesc is the grpc.ServiceDesc for NmsInventoryServiceSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NmsInventoryServiceSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.opennms.plugin.grpc.proto.spog.NmsInventoryServiceSync",
	HandlerType: (*NmsInventoryServiceSyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InventoryUpdate",
			Handler:       _NmsInventoryServiceSync_InventoryUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AlarmUpdate",
			Handler:       _NmsInventoryServiceSync_AlarmUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EventUpdate",
			Handler:       _NmsInventoryServiceSync_EventUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HeartBeatUpdate",
			Handler:       _NmsInventoryServiceSync_HeartBeatUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spog.proto",
}
